<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!--读取db.properties -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<!--数据库驱动 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!--连接数据库的url -->
		<property name="url" value="${jdbc.url}" />
		<!--连接数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!--连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!--最大连接数 -->
		<property name="maxTotal" value="${jdbc.maxTotal}" />
		<!--最大空闲连接 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!--初始化连接数 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 超时时间 -->
		<property name="maxWaitMillis" value="${jdbc.maxWaitMillis}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	</bean>
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 切面 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.ora.service.*.*(..))" />
	</aop:config>
	<!-- 配置 MyBatis的工厂 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置MyBatis的核心配置文件所在位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	<!-- 接口开发,扫描 com.ora.dao包 ，写在此包下的接口即可被扫描到 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ora.dao" />
	</bean>
	<!-- 配置扫描@Service注解 -->
	<context:component-scan base-package="com.ora.service" />
	<!-- 配置定时器，start -->
	<!-- 配置任务类 -->
	<bean id="myJob" class="com.ora.job.MyJob"></bean>


	<!-- 配置jobDetail -->
	<bean id="myJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 用到的Job实例 -->
		<property name="targetObject">
			<ref bean="myJob" />
		</property>
		<!-- Job实例中的方法 -->
		<property name="targetMethod">
			<value>insertHistory</value>
		</property>
	</bean>

	<bean id="myJobDetai3"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 用到的Job实例 -->
		<property name="targetObject">
			<ref bean="myJob" />
		</property>
		<!-- Job实例中的方法 -->
		<property name="targetMethod">
			<value>copyPerformance</value>
		</property>
	</bean>
	<bean id="myJobDetai4"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 用到的Job实例 -->
		<property name="targetObject">
			<ref bean="myJob" />
		</property>
		<!-- Job实例中的方法 -->
		<property name="targetMethod">
			<value>deletePerformance</value>
		</property>
	</bean>


	<!-- 配置触发器Trigger -->
	<bean id="myTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="myJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0 0 0 1 * ?</value>
		</property>
	</bean>
	<bean id="myTrigger3"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="myJobDetai3" />
		</property>
		<property name="cronExpression">
			<value>0 0 0 1 * ?</value>
		</property>
	</bean>
	<bean id="myTrigger4"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="myJobDetai4" />
		</property>
		<property name="cronExpression">
			<value>0 0 12 2 * ?</value>
		</property>
	</bean>


	<!-- 配置scheduler工厂 -->
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="myTrigger" />
				<ref bean="myTrigger3" />
				<ref bean="myTrigger4" />
			</list>
		</property>
	</bean>
	<!-- 配置定时器，start -->
</beans>
